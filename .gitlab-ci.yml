stages:
  - pre-build
  - pre-build-test
  - push-artifacts
  - build
  - deploy
  - performance
  - cleanup

variables:
  DOMAIN_NAME: oecloud.local
  PERF_DOMAIN_NAME: oecloud.perf
  REGISTRY: registry.${DOMAIN_NAME}
  EXECUTOR_IMAGE: oecloud-executor:12.x
  EXECUTOR_IMAGE_ORACLE: debian-node-oracle-docker:12.x

image: ${REGISTRY}/${EXECUTOR_IMAGE}

before_script:
  - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
  - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
  - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
  - if [ ${group} == "oecloudio" ]; then export APP_IMAGE_NAME=$project; else export APP_IMAGE_NAME=$group"-"$project; fi
  - export APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - if [ ${branch} == "master" ]; then export APP_TAG=latest; else export APP_TAG=${branch}; fi
  - export APP_TAG=$(echo $APP_TAG | tr '[:upper:]' '[:lower:]')

  - npm config set unsafe-perm true
  - npm config set progress false
  - npm config set registry ${NPM_REGISTRY}
  # - npm config set registry https://registry.npmjs.org/

npminstall:
  stage: pre-build
  script:
    - echo "Performing code style check..."
    - export status_eslint=0
    - export exit_status=0
    - time npm install eslint babel-eslint --no-optional
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ $status_eslint == 1 ]; then export exit_status=1 && echo "esLint errors exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - time npm install --no-optional
    - echo "Node Modules Installed"
    - npm config rm registry
    - npm audit --json > vulnerabilities.json || true
    - if npm audit; then status_vulnerabilities=0; else status_vulnerabilities=1; fi
    - if [ $status_vulnerabilities == 1 ]; then echo "Dependency vulnerabilities exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
  artifacts:
    expire_in: 2h
    paths:
      - node_modules/
      - vulnerabilities.json
  tags:
    - CEP_RUNNER

mongotest:
  coverage: /Statements.*?(\d+(?:\.\d+)?)%/
  stage: pre-build-test
  variables:
    NODE_ENV: mongo
    DB: mongo
    MONGO_HOST: 10.73.53.144
    MONGO_PORT: '27017'
    DB_NAME: ${CI_JOB_ID}_mongo
  script:
    - echo 'Performing MongoDB Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    - time npm install --no-optional
    - npm run grunt-cover
  artifacts:
    expire_in: 2h
    paths:
      - coverage/
  tags:
    - CEP_RUNNER

postgrestest:
  coverage: /Statements.*?(\d+(?:\.\d+)?)%/
  stage: pre-build-test
  variables:
    NODE_ENV: postgres
    DB: postgres
    POSTGRES_HOST: 10.73.53.144
    POSTGRES_PORT: '5432'
    DB_NAME: ${CI_JOB_ID}_pg
    ENABLE_DS_AUTOUPDATE: 'true'
  script:
    - echo 'Performing PostgreSQL Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    - time npm install --no-optional
    - npm run grunt-cover
  tags:
    - CEP_RUNNER
    
oracletest:
  coverage: /Statements.*?(\d+(?:\.\d+)?)%/
  image: ${REGISTRY}/${EXECUTOR_IMAGE_ORACLE}
  stage: pre-build-test
  variables:
    NODE_ENV: oracle
    DB: oracle
    ORACLE_HOST: 10.73.53.144
    ORACLE_PORT: '1521'
    ORACLE_SYSUSER: oeadmin
    ORACLE_SYSPASSWORD: oeadmin
    ORACLE_SID: ORCLCDB
    ENABLE_DS_AUTOUPDATE: 'true'
  script:
    - echo 'Performing Oracle Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    # - export DB_NAME=${CI_JOB_ID}_pg
    # - time npm install git+http://evgit/oecloud.io/oe-connector-oracle.git#master --no-optional
    - time npm install --no-optional
    # - mv /oracledb node_modules/
    - node test/oracle-utility.js
    # - export ORACLE_USERNAME=${group}"_"${project}
    # - export ORACLE_USERNAME=$(echo $ORACLE_USERNAME | tr '[:lower:]' '[:upper:]')
    # - export ORACLE_PASSWORD=$(echo $group | tr '[:upper:]' '[:lower:]')
    - . ./oracle-user.sh
    - env | grep -i oracle
    - echo "Oracle user details:"${ORACLE_USERNAME}"/"${ORACLE_PASSWORD}
    - npm run grunt-cover
  tags:
    - CEP_RUNNER

pushartifacts:
  stage: push-artifacts
  script:
    - echo "Copying all artifacts"
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/${CI_BUILD_REF_NAME}/
    - cp vulnerabilities.json ./artifacts/${CI_PROJECT_NAME}/${CI_BUILD_REF_NAME}/
    - cp -r coverage/ ./artifacts/${CI_PROJECT_NAME}/${CI_BUILD_REF_NAME}/
    - git clone http://10.73.97.24/oecloud.io/build-tools.git
    - sh ./build-tools/push_artifacts.sh
  tags:
    - CEP_RUNNER
  only:
    - /^.*/@oecloud.io/oe-workflow

buildjob:
  stage: build
  script:
    - echo "Building ${APP_IMAGE_NAME} image..."
    - time npm install --no-optional
    #- envsubst < Dockerfile  | docker build . -t ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG} --build-arg HTTP_PROXY=$http_proxy --build-arg HTTPS_PROXY=$https_proxy --pull -f -;
    - sed 's/\${REGISTRY}/'"${REGISTRY}"'/g' Dockerfile | docker image build . -t ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG} --build-arg HTTP_PROXY=${http_proxy} --build-arg HTTPS_PROXY=${https_proxy} --pull -f -
    - docker image push ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}
    - echo "Image (${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}) built and pushed to registry"
  tags:
    - CEP_RUNNER

deployjob-swarm:
  stage: deploy
  # image: ${REGISTRY}/oecloud-executor:k6
  script:
    - export STACK_NAME=${APP_IMAGE_NAME//[^[:alnum:]]/}
    - export MONGO_HOST=${STACK_NAME}_mongo
    - export NETWORK_NAME=${APP_IMAGE_NAME}
    - export networkAvailable=$(docker network ls -q --filter name=${NETWORK_NAME} | wc -l)
    - if [ $networkAvailable -eq 0 ]; then docker network create --driver overlay ${NETWORK_NAME}; fi
    - docker stack rm ${STACK_NAME}
    - sleep 15
    # - echo "$HAPROXY ${APP_IMAGE_NAME}.${DOMAIN_NAME}" >> /etc/hosts
    - sed 's/\${NETWORK_NAME}/'"${NETWORK_NAME}"'/g' docker-compose.yml > docker-compose2.yml
    - mv -f docker-compose2.yml docker-compose.yml
    - export VIRTUAL_HOST="https://${APP_IMAGE_NAME}.${DOMAIN_NAME},${APP_IMAGE_NAME}.${DOMAIN_NAME},https://$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-${CI_BUILD_REF_NAME}.$DOMAIN_NAME,http://$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-${CI_BUILD_REF_NAME}.$DOMAIN_NAME"
    - echo $VIRTUAL_HOST
    - cat docker-compose.yml
    - docker stack deploy -c docker-compose.yml ${STACK_NAME}
    - docker stack services ${STACK_NAME}
    - export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/)
    - export countElapsed=0
    - export app_exit_status=0
    - while [ $isStarted -ne 200 ]; do let countElapsed=countElapsed+1; echo ""; echo -n "Waiting till the URL is up..."; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/); echo $isStarted; sleep 10; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=200; fi; done
    - if [ $app_exit_status -eq 1 ]; then echo "App failed to start....."; docker stack ps ${STACK_NAME} --no-trunc;docker service logs ${STACK_NAME}_web; else echo "Your application URL is accessible @ https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/"; fi
    - exit $app_exit_status
  except:
    - tags
  tags:
    - CEP_RUNNER

performancejob:
  image: ${REGISTRY}/jmeter:docker
  stage: performance
  variables:
    NODE_ENV: "mongo"
    MONGO_HOST: "10.73.97.17"
    DB_NAME: "${CI_JOB_ID}_mongo"
    APP_PROTOCOL: "https"
    APP_PORT: "443"
    PERF_USERS: "1"
    PERF_LOOPCOUNT: "50000"
  before_script:
    - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
    - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
    - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
    - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$project; else export APP_IMAGE_NAME=$branch"-"$project; fi
    - if [ $group == "oecloudio" ]; then export APP_IMAGE_NAME=$APP_IMAGE_NAME; else export APP_IMAGE_NAME=$group"-"$APP_IMAGE_NAME; fi
    - if [ $branch == "master" ]; then export TAG=latest; else export TAG=${CI_BUILD_REF_NAME}; fi
    - APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$group"-"$project; else export APP_IMAGE_NAME=$group"-"$branch"-"$project; fi
    - export APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - export APP_TAG=latest
  script:
    - npm set progress=false
    - npm config set registry ${NPM_REGISTRY}
    #- npm config set registry https://registry.npmjs.org/
    - if docker stack rm ${APP_IMAGE_NAME}; then echo "stack removed"; else echo "nothing found in stack"; fi
    - time npm install --no-optional
    - export APP_URL=${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}
    - git clone http://10.73.97.24/oecloud.io/build-tools.git
    - sed 's/\$REGISTRY/'"$REGISTRY"'/g' ./build-tools/performance/Dockerfile > Dockerfile
    - echo "Building ${APP_IMAGE_NAME} image and pushing to registry..."
    - time docker image build -t ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG} --no-cache --pull .
    - time docker image push ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}
    - echo "Image (${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}) built and pushed to registry"
    - docker stack deploy --compose-file ./build-tools/performance/docker-compose.yml ${APP_IMAGE_NAME}
    - export HTTP_RESPONSE_CODE=200
    - export countElapsed=0
    - export app_exit_status=0
    - export no_proxy=$no_proxy,${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}
    - export NO_PROXY=$no_proxy
    - echo "${DOCKER_ROUTER_HOST} ${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}" >> /etc/hosts
    - export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/explorer/)
    - while [ ${isStarted} -ne ${HTTP_RESPONSE_CODE} ]; do let countElapsed=countElapsed+1; echo ""; sleep 10; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/explorer/); echo -n "Waiting till the URL is up..."; echo ${isStarted}; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=${HTTP_RESPONSE_CODE}; fi; done
    - if [ $app_exit_status -eq 1 ]; then echo "App failed to start....."; docker stack ps ${APP_IMAGE_NAME}; docker service logs ${APP_IMAGE_NAME}_web; docker stack rm ${APP_IMAGE_NAME}; exit $app_exit_status; else echo "Your application URL is accessible @ https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/"; fi
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/performance
    - export BPMN_PATH=$CI_PROJECT_DIR/test/performance/oe-workflow-performance-test.bpmn
    - sh ./build-tools/performance/performance.sh
    - sh ./build-tools/push_artifacts.sh
    - if docker stack rm ${APP_IMAGE_NAME}; then echo "stack removed"; else echo "nothing found in stack"; fi
  when: manual
  tags:
    - PERF_RUNNER


lastcleanup:
  stage: cleanup
  script:
    - echo "Cleaning up the deployment"
    - docker stack rm ${STACK_NAME}
  when: manual
  tags:
    - CEP_RUNNER
