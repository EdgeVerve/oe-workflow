stages:
  - pre-build
  - pre-build-test
  - build
  - deploy
  - push-artifacts
  - performance
  - cleanup

image: $REGISTRY/debian-node-oracle-docker
variables:
  DOMAIN_NAME: oecloud.local
  PERF_DOMAIN_NAME: oecloud.perf
  REGISTRY: registry.${DOMAIN_NAME}
  TRUSTED_REGISTRY: dtr.${DOMAIN_NAME}
  NETWORK_NAME: $CI_PROJECT_NAME
  #Below values need to change for projects
  DTR_ORG: demo-org
  DTR_IMAGE: oeworkflowservice
  MAIN_PROJECT_GROUP: oecloud.io
  COLLECTION_NAME: demo-collection
  NAMESPACE: demo-namespace
  OPENSHIFT_DOMAIN: openshift.oecloud.local

before_script:
  - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
  - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
  - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
  - export pipelineId=${CI_PIPELINE_ID//[^[:alnum:]]/}
  - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$project; else export APP_IMAGE_NAME=$branch"-"$project; fi
  - if [ $group == "oecloudio" ]; then export APP_IMAGE_NAME=$APP_IMAGE_NAME; else export APP_IMAGE_NAME=$group"-"$APP_IMAGE_NAME; fi
  - if [ $branch == "master" ]; then export TAG=latest; else export TAG=${CI_BUILD_REF_NAME}; fi
  - APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - export PROJECT_NAME=${APP_IMAGE_NAME}
  - export DB_NAME=${CI_PIPELINE_ID}_mongo
  - export STACK_NAME=${PROJECT_NAME//[^[:alnum:]]/}
  - export MONGO_HOST=${STACK_NAME}_mongo
  - echo "Domain name - "$DOMAIN_NAME
  - echo "App will be pushed to registry - "$REGISTRY
  - echo "The image name in registry - "$APP_IMAGE_NAME
  - echo "$CA_FILE" > ca.pem
  - echo "$CERT_FILE" > cert.pem
  - echo "$KEY_FILE" > key.pem
  - export DOCKER_CERT_PATH=$PWD
  - echo "${KUBE_YML}" > kube.yml
  - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$group"-"$project; else export APP_IMAGE_NAME=$group"-"$branch"-"$project; fi
  - export APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
  - export APP_TAG=latest

npminstall:
  stage: pre-build
  script:
    - echo "Performing code style check..."
    - status_eslint=0
    - exit_status=0
    - npm config set registry http://registry.npmjs.org/
    #- npm config set registry http://10.188.25.62:9002/
    - npm set progress=false
    - time npm install eslint babel-eslint --no-optional
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ $status_eslint == 1 ]; then exit_status=1 && echo "esLint errors exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - time npm install --no-optional
    - echo "Node Modules Installed"
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/
    - npm audit --json > ./artifacts/${CI_PROJECT_NAME}/vulnerabilities.json || true
    - if npm audit; then status_vulnerabilities=0; else status_vulnerabilities=1; fi
    - if [ $status_vulnerabilities == 1 ]; then echo "Dependency vulnerabilities exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
  artifacts:
    untracked: true
    expire_in: 2h
    paths:
      - node_modules/
       - artifacts/
  tags:
    - CEP_RUNNER


mongotest:
  stage: pre-build-test
  script:
    - echo 'Performing MongoDB Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    - export NODE_ENV=mongo
    - export MONGO_HOST="10.73.53.144"
    - export DB=mongo
    - export DB_NAME=${CI_PIPELINE_ID}_mongo
    #- npm config set registry http://10.188.25.62:9002/
    - time npm install --no-optional
    - npm run grunt-cover
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/
    - cp -r coverage ./artifacts/${CI_PROJECT_NAME}/
  artifacts:
    untracked: true
    expire_in: 2h
    paths:
      - coverage/
      - artifacts/
    when: on_failure
  tags:
    - CEP_RUNNER

postgrestest:
  stage: pre-build-test
  script:
    - echo 'Performing PostgreSQL Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    - export NODE_ENV=postgres
    - export DB=postgres
    - export POSTGRES_HOST="10.73.53.144"
    - export DB_NAME=${CI_PIPELINE_ID}_pg
    - export ENABLE_DS_AUTOUPDATE=true
    #- npm config set registry http://10.188.25.62:9002/
    - time npm install git+http://evgit/oecloud.io/oe-connector-postgresql.git --save
    - time npm install --no-optional
    - npm run grunt-cover
  tags:
    - CEP_RUNNER
  tags:
    - CEP_RUNNER

oracletest:
  stage: pre-build-test
  script:
    - echo 'Performing Oracle Test'
    - export ACTIVITI_HOST=https://activiti.oecloud.local
    - export APP_TAG=oracle
    - export NODE_ENV=oracle
    - export ORACLE_HOST=10.73.53.144
    - export ORACLE_SYSUSER=oeadmin
    - export ORACLE_SYSPASSWORD=oeadmin
    - export ORACLE_SID=ORCLCDB
    - export DB_NAME=${CI_PIPELINE_ID}_pg
    - export ENABLE_DS_AUTOUPDATE=true
    #- npm config set registry http://10.188.25.62:9002/
    - time npm install git+http://evgit/oecloud.io/oe-connector-oracle.git --no-optional
    - time npm install --no-optional
    - mv /oracledb node_modules/
    - export CI_PROJECT_NAMESPACE=${group}
    - node test/oracle-utility.js
    - export ORACLE_USERNAME=${CI_PROJECT_NAMESPACE}"-"${CI_PROJECT_NAME}
    - export ORACLE_USERNAME=$(echo $ORACLE_USERNAME | tr '[:lower:]' '[:upper:]')
    - export ORACLE_PASSWORD=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - echo "Oracle user details:"${ORACLE_USERNAME}"/"${ORACLE_PASSWORD}
    - npm run grunt-cover
  tags:
    - CEP_RUNNER


buildjob:
  stage: build
  #image: dtr.oecloud.local/library/oecloud-executor:k6
  image: $REGISTRY/oecloud-executor:k6
  script:
    - echo $http_proxy
    - echo $https_proxy
    - echo "Building ${APP_IMAGE_NAME} image..."
    #- npm config set registry http://10.188.25.62:9002/
    - npm install --no-optional & NPM_PID=$!
    - wait ${NPM_PID}
    #- envsubst < Dockerfile  | docker build . -t ${REGISTRY}/${APP_IMAGE_NAME}:${TAG} --build-arg HTTP_PROXY=$http_proxy --build-arg HTTPS_PROXY=$https_proxy --pull -f -;
    - sed 's/\${REGISTRY}/'"${REGISTRY}"'/g' Dockerfile | docker build . -t ${REGISTRY}/${APP_IMAGE_NAME}:${TAG} --build-arg HTTP_PROXY=$http_proxy --build-arg HTTPS_PROXY=$https_proxy --pull -f -
    - docker push ${REGISTRY}/${APP_IMAGE_NAME}:${TAG}
    - echo "Image ($REGISTRY/$APP_IMAGE_NAME:${TAG}) built and pushed to registry"
  tags:
    - CEP_RUNNER

deployjob-swarm:
  stage: deploy
  image: $REGISTRY/oecloud-executor:k6
  script:
    - export networkAvailable=$(docker network ls -q --filter name=${NETWORK_NAME} | wc -l)
    - if [ $networkAvailable -eq 0 ]; then docker network create --driver overlay ${NETWORK_NAME}; fi
    - docker stack rm ${STACK_NAME}
    - sleep 15
    - echo "$HAPROXY ${APP_IMAGE_NAME}.${DOMAIN_NAME}" >> /etc/hosts
    - sed 's/\${NETWORK_NAME}/'"${NETWORK_NAME}"'/g' docker-compose.yml > docker-compose2.yml
    - sed 's/\$REGISTRY/'"$REGISTRY"'/g' docker-compose2.yml > docker-compose.yml
    - export VIRTUAL_HOST="https://${APP_IMAGE_NAME}.${DOMAIN_NAME},${APP_IMAGE_NAME}.${DOMAIN_NAME},https://$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-${CI_BUILD_REF_NAME}.$DOMAIN_NAME,http://$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-${CI_BUILD_REF_NAME}.$DOMAIN_NAME"
    - echo $VIRTUAL_HOST
    - cat docker-compose.yml
    - docker stack deploy -c docker-compose.yml ${STACK_NAME}
    - docker stack services ${STACK_NAME}
    - export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/)
    - export countElapsed=0
    - export app_exit_status=0
    - while [ $isStarted -ne 200 ]; do let countElapsed=countElapsed+1; echo ""; echo -n "Waiting till the URL is up..."; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/); echo $isStarted; sleep 10; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=200; fi; done
    - if [ $app_exit_status -eq 1 ]; then echo "App failed to start....."; docker stack ps ${STACK_NAME} --no-trunc;docker service logs ${STACK_NAME}_web; else echo "Your application URL is accessible @ https://${APP_IMAGE_NAME}.${DOMAIN_NAME}/"; fi
    - exit $app_exit_status
  except:
    - tags
  tags:
    - CEP_RUNNER

pushartifacts:
  stage: push-artifacts
  script:
    - echo "Copying all artifacts"
    - git clone http://10.73.97.24/oecloud.io/build-tools.git
    - sh ./build-tools/push_artifacts.sh
  tags:
    - CEP_RUNNER

performancejob:
  image: $REGISTRY/jmeter:docker
  stage: performance
  variables:
    NODE_ENV: "mongo"
    MONGO_HOST: "10.73.97.17"
    DB_NAME: "${CI_JOB_ID}_mongo"
    APP_PROTOCOL: "https"
    APP_PORT: "443"
    PERF_USERS: "1"
    PERF_LOOPCOUNT: "50000"
  before_script:
    - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
    - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
    - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
    - export pipelineId=${CI_PIPELINE_ID//[^[:alnum:]]/}
    - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$project; else export APP_IMAGE_NAME=$branch"-"$project; fi
    - if [ $group == "oecloudio" ]; then export APP_IMAGE_NAME=$APP_IMAGE_NAME; else export APP_IMAGE_NAME=$group"-"$APP_IMAGE_NAME; fi
    - if [ $branch == "master" ]; then export TAG=latest; else export TAG=${CI_BUILD_REF_NAME}; fi
    - APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$group"-"$project; else export APP_IMAGE_NAME=$group"-"$branch"-"$project; fi
    - export APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')
    - export APP_TAG=latest
  script:
    - npm set progress=false
    - npm config set registry http://10.188.25.62:9002/
    #- npm config set registry https://registry.npmjs.org/
    - if docker stack rm ${APP_IMAGE_NAME}; then echo "stack removed"; else echo "nothing found in stack"; fi
    - time npm install --no-optional
    - export APP_URL=${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}
    - git clone http://10.73.97.24/oecloud.io/build-tools.git
    - sed 's/\$REGISTRY/'"$REGISTRY"'/g' ./build-tools/performance/Dockerfile > Dockerfile
    - echo "Building ${APP_IMAGE_NAME} image and pushing to registry..."
    - time docker image build -t ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG} --no-cache --pull .
    - time docker image push ${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}
    - echo "Image (${REGISTRY}/${APP_IMAGE_NAME}:${APP_TAG}) built and pushed to registry"
    - docker stack deploy --compose-file ./build-tools/performance/docker-compose.yml ${APP_IMAGE_NAME}
    - export HTTP_RESPONSE_CODE=200
    - export countElapsed=0
    - export app_exit_status=0
    - export no_proxy=$no_proxy,${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}
    - export NO_PROXY=$no_proxy
    - echo "${DOCKER_ROUTER_HOST} ${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}" >> /etc/hosts
    - export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/explorer/)
    - while [ ${isStarted} -ne ${HTTP_RESPONSE_CODE} ]; do let countElapsed=countElapsed+1; echo ""; sleep 10; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/explorer/); echo -n "Waiting till the URL is up..."; echo ${isStarted}; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=${HTTP_RESPONSE_CODE}; fi; done
    - if [ $app_exit_status -eq 1 ]; then echo "App failed to start....."; docker stack ps ${APP_IMAGE_NAME}; docker service logs ${APP_IMAGE_NAME}_web; docker stack rm ${APP_IMAGE_NAME}; exit $app_exit_status; else echo "Your application URL is accessible @ https://${APP_IMAGE_NAME}.${PERF_DOMAIN_NAME}/"; fi
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/performance
    - export BPMN_PATH=$CI_PROJECT_DIR/test/performance/oe-workflow-performance-test.bpmn
    - sh ./build-tools/performance/performance.sh
    - sh ./build-tools/push_artifacts.sh
    - if docker stack rm ${APP_IMAGE_NAME}; then echo "stack removed"; else echo "nothing found in stack"; fi
  when: manual
  tags:
    - PERF_RUNNER


lastcleanup:
  stage: cleanup
  script:
    - echo "Finishing CI CD"
  tags:
    - CEP_RUNNER
