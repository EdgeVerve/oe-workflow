/**
 *
 * Â©2016-2017 EdgeVerve Systems Limited (a fully owned Infosys subsidiary),
 * Bangalore, India. All Rights Reserved.
 *
 */

var fs = require('fs');
var path = require('path');

var bootstrap = require('./bootstrap');
var chai = bootstrap.chai;
var assert = chai.assert;
var models = bootstrap.models;
var log = bootstrap.log();

var stateVerifier = require('./utils/stateverifier');

describe('Test case for Business Rule Task', function cb() {
  this.timeout(10000);
  var name = 'businessRuleTask';
  var testVars = {};

  it('should read the file', function cb(done) {
    fs.readFile(path.resolve('./test/bpmn-files', name + '.bpmn'), 'utf8', (err, data) => {
      testVars.xmldata = data;
      done(err);
    });
  });

  it('deploy the WorkflowDefinition', function cb(done) {
    var defData = { 'name': name, 'xmldata': testVars.xmldata };
    models.WorkflowDefinition.create(defData, bootstrap.defaultContext, function cb(err) {
      // Code for duplicate keys
      if (bootstrap.checkDuplicateKeyError(err))              {done();}          else {
        done(err);
      }
    });
  });

  it('should create a new record for decision table model', function cb(done) {
    models.DecisionTable.create({
      'name': 'Adjustments',
      'document': {
        'documentName': 'Adjustments.xlsx',
        'documentData': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,'
      }
    }, bootstrap.defaultContext, function cb(err, data) {
      if (bootstrap.checkDuplicateKeyError(err)) {
        done(err);
      } else {
        // There should not be any error while adding the new record into decision table
        done();
      }
    });
  });

  it('create workflow instance ', function cb(done) {
    var data = { 'workflowDefinitionName': name };
    models.WorkflowInstance.create(data, bootstrap.defaultContext, function cb(err, instance) {
      if (err) {
        return done(err);
      }
      testVars.mainWorkflowInstance = instance;
      setTimeout(done, 2000);
    });
  });

  it('fetch process instance', function cb(done) {
    testVars.mainWorkflowInstance.processes({}, bootstrap.defaultContext, function cb(err, instance) {
      if (err) {
        return done(err);
      }
      assert.isNotNull(instance);
      assert.lengthOf(instance, 1);
      testVars.processes = instance;
      setTimeout(done, 1000);
    });
  });

  /**
   * TODO : Disabling the test case because business rule input format seems to be change, need to update the encodede excel
   */
  it('validate process', function cb(done) {
    models.ProcessInstance.findById(testVars.processes[0].id, bootstrap.defaultContext, function cb(err, instance) {
      if (err) {
        return done(err);
      }
      log.debug(instance);
      assert.isNotNull(instance);
      assert.equal(instance._status, 'complete');
      var expectedFlow = ['Start', 'BusinessRule Task', 'Script Task', 'End'];
      stateVerifier.verifyFlow(instance._processTokens, expectedFlow);
      assert.isNotNull(instance._processVariables.ruleEngineDecision);
      assert.isNotNull(instance._processVariables.ruleEngineDecision.body);
      assert.equal(instance._processVariables.ruleEngineDecision.body.Discount, 0.05);
      assert.equal(instance._processVariables.ruleEngineDecision.body.Shipping, 'Air');
      setTimeout(done, 1000);
    });
  });
});
